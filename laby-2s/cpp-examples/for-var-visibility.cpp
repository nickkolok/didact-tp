#include <iostream>

using namespace std;

int main()
{
	int s = 0;
	for (int i1 = 0; i1 < n; i1++) {
		s += i1;
	}

	// Так не работает: i1 видно только внутри цикла.
	//cout << i1;

	// Если нужно обращаться к i2 вне цикла,
	// то нужно объявить её вне цикла
	int i2;
	for (i2 = 0; i2 < n; i2++) {
		s += i2;
	}
	cout << i2;

	// Двойное объявление приведёт к интересным последствиям,
	// называемым скрытием переменных
	// (перекрытием областей видимости)
	int i3 = -1;
	for (i3 = 0; i3 < n; i3++) {
		s += i3;
	}
	cout << i3; // Выведет -1


	// Можно написать вот так:

	int i4 = -2;
	for (int i4; i4 < n; i4++) {
		s += i4;
	}
	cout << i4; // Выведет -2
	// Произойдёт интересная ситуация:
	// i4 внутри цикла - неинициализированная переменная,
	// которую мы пытаемся прибавить.

	return 0;
}
/*
Может показаться, что изоляция переменных внутри цикла --- эта ненужный способ создать
программисту проблему. Но это не так. Изоляция переменных позволяет избежать случайного
обращения к этим переменным там, где этого быть не должно.
*/
